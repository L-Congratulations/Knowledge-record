----------------------按菜鸟教程先熟悉一些基本语法和用法主要了解几大块：比如路由、等等------------------------------
 一、基础学习：
  1、插值：主要包括文本插值、html、属性、指令、表达式、参数和修饰符
    （1）文本插值：数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值：<span>Message: {{ msg }}</span>
        Mustache 标签将会被替代为对应数据对象上 msg 属性的值。无论何时，绑定的数据对象上 msg 属性发生了改变，插值处的内容都会更新。
        通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上所有的数据绑定：
        <span v-once>This will never change: {{ msg }}</span>
        （
           <h1>demo:“{{ msg }}”按时大大哇"啊啊啊”</h1>
           <span v-once>This will never change: {{ msg }}</span>
           <input v-model="msg">
            v-once 指令的作用效果是：双向数据绑定时input框内容改变不更新，只保持初始时的数据，而<h1>demo:“{{ msg }}”按时
            大大哇"啊啊啊”</h1>里面的{{msg}}是会与input框里面内容同步的
           ）
        {{msg}}将他看做一个整体可以进行多种组合如:
         <span>Message: {{ msg }}asdawdadadwa</span>
         <span>Message: "{{ msg }}"</span>//在vue里并不会把"{{msg}}"解析成字符串而是将{{msg}}看做了一个整体然后把那个整体
         解析为字符串<h1>demo:“{{ msg }}”按时大大哇"啊啊啊”</h1>
         
         
         小结：{{msg}}是一个整体
              
              无论何时，绑定的数据对象上 msg 属性发生了改变，插值处的内容都会更新。
              双大括号会将数据解释为纯文本，而非 HTML 。为了输出真正的 HTML ，你需要使用 v-html 指令：
              双大括号不能用在属性中 <div id="{{app}}">会报错
        --------------------------------------
        总结：
        1.template（模板）使用小结：template标签首先是一个标签<template></template>然后顾名思义，这是一个模板。顾名思义就是前端模版, 
        里边的脚本图片都不会执行, 直到被使用之后.目的是为了实现前端模块化的大计...
            1.标签内容隐藏性
              上面这个<template>标签上没有设置display: none;，注意到了没有。为何？这只是发挥了<template>标签元素的原本特性，
              天生display:none，时模板元素内部内容是死活不会呈现的。因此，无需设置隐藏。这就是HTML5 <template>标签元素特征之一：
              标签内容隐藏性.          
            2. 标签位置任意性
             除了上面<template>子元素天然隐藏外，<template>标签还有一个特性，就是位置任意性，这非常类似<script>或者<style>标签，
             可以在<head>中，也可以在<body>或者<frameset>中。
            3. childNodes无效性
             虽然，肉眼看上去是<template>标签里面还有很多子标签，这种惯性思维在这里是不受用的。假设变量template是我们获得的一个
             <template>标签DOM（里面一大堆HTML代码），你会发现：template.childNodes是个空大屁。我们可以使用template.innerHTML
             获取完整的HTML片段。如果你非得获取“伪子元素”。也是有办法的，OK，睁大眼睛，要使用content属性。

             简言之是：可以放在任意位置的标签，特性是里面的脚本直到被使用后才会执行


            （比如需要ajax刷新一个列表，以前的做法是后端生成html返回，或者前端用DOM构建后加入，但现在有了template标签，
            html的架构就不需要程序管了，只需要在特定的位置加入ajax请求到的数据即可，比如img的src或者其他text之类的
            ，然后clone这个DOM，加入列表。其实许多人以前也应该做过类似的事情，把一段html隐藏起来，然后clone它并修改里面的属性或者内容，
            得到一个DOM，加入列表并显示，用来刷新ajax列表。---------还是有些模糊）

        
        
        ----------------------------------------
        
        （2）、纯HTML
             双大括号会将数据解释为纯文本，而非 HTML 。为了输出真正的 HTML ，你需要使用 v-html 指令：
             <div v-html="rawHtml"></div>
             <div id="app">
                 <div v-html="message"></div>
             </div>

             <script>
             new Vue({
               el: '#app',
               data: {
                 message: '<h1 style="color:red">菜鸟教程</h1>'
               }
             })
             </script>
             被插入的内容都会被当做 HTML —— 数据绑定会被忽略。注意，你不能使用 v-html 来复合局部模板，因为 Vue 不是基于字符串
             的模板引擎。组件更适合担任 UI 重用与复合的基本单元。
             
             ------------------------------
             总结：和数据绑定一样，在new vue（）实例中定义好了之后再在dom中通过自己的方式进行调用
             -------------------------------
             
             （3）、属性
                 Mustache 不能在 HTML 属性中使用，应使用 v-bind 指令：
                <div v-bind:id="dynamicId"></div>
                这对布尔值的属性也有效 —— 如果条件被求值为 false 的话该属性会被移除：
                <button v-bind:disabled="someDynamicCondition">Button</button>
                
                    <div id="app">
                      <label for="r1">修改颜色</label><input type="checkbox" v-model="class1" id="r1">//双向数据绑定可以控制
                                                                                                     //class1: false
                                                                                                     //是true还是falsew
                      <br><br>
                      <div v-bind:class="{'class1': class1}">
                        directiva v-bind:class
                      </div>
                    </div>

                    <script>
                    new Vue({
                        el: '#app',
                      data:{
                          class1: false
                      }
                    });
                    </script>
            -------------------------------------
            总结：v-bind:class="{'class1': class1}"
            v-bind：后面加属性名如class、id、display、等
            v-bind：class后面用等于号进行给属性赋值，赋的值要放在""中如v-bind:id="dynamicId" 
                    v-bind:disabled="someDynamicCondition"等
                    属性赋值完毕之后还可以对该属性进行布尔值判断：这对布尔值的属性也有效 —— 如果条件被求值为 false 的话该属性会被移除：
                    <button v-bind:disabled="someDynamicCondition">Button</button>
                    v-bind:class="{'class1': class1}"等 
                    对属性进行布尔值判断时用对象的形式：{'class1': class1}前一个为属性名，后一个注意此处不用加引号
            ---------------------------------------
           （4）、javascript表达式
               迄今为止，在我们的模板中，我们一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定， Vue.js 都提供了完全的 
               JavaScript 表达式支持。
               {{ number + 1 }}
               {{ ok ? 'YES' : 'NO' }}
               {{ message.split('').reverse().join('') }}
               <div v-bind:id="'list-' + id"></div>
               
               模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户
               定义的全局变量。
               <div id="app">
                {{5+5}}<br>//10
                {{ ok ? 'YES' : 'NO' }}<br>//YES
                {{ message.split('').reverse().join('') }}//BOONUR
                <div v-bind:id="'list-' + id">菜鸟教程</div>//id为list-1
               </div>

               <script>
               new Vue({
                 el: '#app',
                 data: {
                ok: true,
                   message: 'RUNOOB',
                id : 1
                 }
               })
               </script>
          ---------------------------------------------------
          总结：{{}}表达式里面用表达式
          这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，
               所以下面的例子都不会生效。
               <!-- 这是语句，不是表达式 -->
               {{ var a = 1 }}
               <!-- 流控制也不会生效，请使用三元表达式 -->
               {{ if (ok) { return message } }}
               
               表达式：
               
          ---------------------------------------------------
