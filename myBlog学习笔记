1、新建文件夹myBlog
2、打开文件夹内的命令行，运行npm init 安装 package.json
  package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件重点内容，
  它是存放在项目根目录的普通json文件：
  -安装步骤：进入项目根目录打开此目录下的命令行--》npm init -->填写的内容参照下面链接内容
  （http://jingyan.baidu.com/article/14bd256e7f7d7fbb6d2612c4.html）
  ---name项不能包含大写字母 前四项是必填项 后边可填可不填
3、在myBlog文件夹下建立项目结构：
        ---public文件夹存放外部文件，images，js ，css ，，，存放静态文件，如样式、图片等
        ---views文件夹存放视图界面，，，存放模板文件
        ---routes文件夹存放路由，，，存放路由文件
        ---models文件夹存放，，，，存放操作数据库的文件
        ---app.js文件项目启动文件，，，程序主文件
        ---package.json: 存储项目名、描述、作者、依赖等等信息
        
        
---------我们遵循了 MVC（模型(model)－视图(view)－控制器(controller/route)） 的开发模式。        
        
4、安装依赖模块：        
    运行npm install 
    // node外部模块安装的具体方法和存放路径：
    // 安装命令：：npm install formidable
    // npm install在哪个目录下执行就安装在这个目录的node_modules文件夹下。
    // package.json定义了需要安装哪些依赖，在package.json所在的目录下执行npm install。
    此项目需要依赖的模块有：：：
      ----安装 Node 模块时，如果指定了 --save 参数，那么此模块将被添加到 package.json 文件中
      dependencies 依赖列表中。 
          然后通过 npm install 命令即可自动安装依赖列表中所列出的所有模块。
      --npm install config-lite connect-flash connect-mongo ejs express 
      express-formidable express-session marked moment mongolass objectid-to-timestamp
      sha1 winston express-winston --save
          
          
      config-lite: 读取配置文件
      connect-flash: 页面通知提示的中间件，基于 session 实现
      connect-mongo: 将 session 存储于 mongodb，结合 express-session 使用
      ejs: 模板
      express: web 框架
      express-formidable: 接收表单及文件的上传中间件
      express-session: session 中间件
      marked: markdown 解析
      moment: 时间格式化
      mongolass: mongodb 驱动
      objectid-to-timestamp: 根据 ObjectId 生成时间戳
      sha1: sha1 加密，用于密码加密
      winston: 日志
      express-winston: 基于 winston 的用于 express 的日志中间件
      
5、配置文件：：：
      不管是小项目还是大项目，将配置与代码分离是一个非常好的做法。我们通常将配置写到一个配置文件里，
      如 config（配置的意思）.js 或 config.json ，并放到项目的根目录下。但通常我们都会有许多环境，如本地开发环
      境、测试环境和线上环境等，不同的环境的配置不同，我们不可能每次部署时都要去修改引用 config.test.js 
      或者 config.production.js。config-lite 模块正是你需要的。
      config-lite 是一个轻量的读取配置文件的模块。config-lite 会根据环境变量（NODE_ENV）的不同从当前
      执行进程目录下的 config 目录加载不同的配置文件。如果不设置 NODE_ENV，则读取默认的 default 配置文件，
      如果设置了 NODE_ENV，则会合并指定的配置文件和 default 配置文件作为配置，config-lite 
      支持 .js、.json、.node、.yml、.yaml 后缀的文件。

      如果程序以 NODE_ENV=test node app 启动，则通过 require('config-lite') 会依次降级查找
      config/test.js、config/test.json、config/test.node、config/test.yml、config/test.yaml 
      并合并 default 配置; 如果程序以 NODE_ENV=production node app 启动，则通过 require('config-lite') 
      会依次降级查找 config/production.js、config/production.json、config/production.node、
      config/production.yml、config/production.yaml 并合并 default 配置。

      在 myblog 下新建 config 目录，在该目录下新建 default（默认的意思）.js，添加如下代码：

      config/default.js

      module.exports = {
        port: 3000,
        session: {
          secret: 'myblog',
          key: 'myblog',
          maxAge: 2592000000
        },
        mongodb: 'mongodb://localhost:27017/myblog'
      };
      配置释义：

      port: 程序启动要监听的端口号
      session: express-session 的配置信息，后面介绍
      mongodb: mongodb 的地址，myblog 为 db 名
      
      
 6、功能与路由设计

    在开发博客之前，我们首先需要明确博客要实现哪些功能。由于本教程面向初学者，所以只实现了博客最基本的功能，
    其余的功能（如归档、标签、分页等等）读者可自行实现。

    功能及路由设计如下：

    注册
    注册页：GET /signup
    注册（包含上传头像）：POST /signup
    
    登录
    登录页：GET /signin
    登录：POST /signin
    登出：GET /signout
    
    查看文章
    主页：GET /posts
    个人主页：GET /posts?author=xxx
    查看一篇文章（包含留言）：GET /posts/:postId
    发表文章
    发表文章页：GET /posts/create
    发表文章：POST /posts
    修改文章
    修改文章页：GET /posts/:postId/edit
    修改文章：POST /posts/:postId/edit
    删除文章：GET /posts/:postId/remove
    
    留言
    创建留言：POST /posts/:postId/comment
    删除留言：GET /posts/:postId/comment/:commentId/remove
    由于我们博客页面是后端渲染的，所以只通过简单的 <a>(GET) 和 <form>(POST) 与后端进行交互，
    如果使用 jQuery 或者其他前端框架（如 angular、vue、react 等等）可通过 Ajax 与后端交互，
    则 api 的设计应尽量遵循 restful 风格。 
       （ restful

            restful 是一种 api 的设计风格，提出了一组 api 的设计原则和约束条件。

            如上面删除文章的路由设计：

            GET /posts/:postId/remove
            restful 风格的设计：

            DELETE /post/:postId
            可以看出，restful 风格的 api 更直观且优雅。

            更多阅读：

            http://www.ruanyifeng.com/blog/2011/09/restful
            http://www.ruanyifeng.com/blog/2014/05/restful_api.html
            http://developer.51cto.com/art/200908/141825.htm
            http://blog.jobbole.com/41233/
        ）    
7、会话

      由于 HTTP 协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识别具体的用户，
      这个机制就是会话（Session）。关于 Session 的讲解网上有许多资料，这里不再赘述。参考：

      http://justsee.iteye.com/blog/1570652
      https://www.zhihu.com/question/19786827
      cookie 与 session 的区别

      cookie 存储在浏览器（有大小限制），session 存储在服务端（没有大小限制）
      通常 session 的实现是基于 cookie 的，即 session id 存储于 cookie 中
      我们通过引入 express-session 中间件实现对会话的支持：

      app.use(session(options))
      session 中间件会在 req 上添加 session 对象，即 req.session 初始值为 {}，当我们登录后设置 
      req.session.user = 用户信息，返回浏览器的头信息中会带上 set-cookie 将 session id 写到
      浏览器 cookie 中，那么该用户下次请求时，通过带上来的 cookie 中的 session id 我们就可以查找
      到该用户，并将用户信息保存到 req.session.user。
      
8、页面通知

    我们还需要这样一个功能：当我们操作成功时需要显示一个成功的通知，如登录成功跳转到主页时，需要显示一个 
    登陆成功 的通知；当我们操作失败时需要显示一个失败的通知，如注册时用户名被占用了，需要显示一个 
    用户名已占用 的通知。通知只显示一次，刷新后消失，我们可以通过 connect-flash 中间件实现这个功能。

    connect-flash 是基于 session 实现的，它的原理很简单：设置初始值 req.session.flash={}，通过 
    req.flash(name, value) 设置这个对象下的字段和值，通过 req.flash(name) 获取这个对象下的值，同时删除这个字段。

    express-session、connect-mongo 和 connect-flash 的区别与联系

    express-session: 会话（session）支持中间件
    connect-mongo: 将 session 存储于 mongodb，需结合 express-session 使用，我们也可以将 session 存储于 redis，如 connect-redis
    connect-flash: 基于 session 实现的用于通知功能的中间件，需结合 express-session 使用     

9、权限控制

    不管是论坛还是博客网站，我们没有登录的话只能浏览，登陆后才能发帖或写文章，即使登录了你也不能修改或删除其他人的文章，
    这就是权限控制。我们也来给博客添加权限控制，如何实现页面的权限控制呢？我们可以把用户状态的检查封装成一个中间件，
    在每个需要权限控制的路由加载该中间件，即可实现页面的权限控制。在 myblog 下新建 middlewares 文件夹，
    在该目录下新建 check.js，添加如下代码：

    middlewares/check.js

    module.exports = {
      checkLogin: function checkLogin(req, res, next) {
        if (!req.session.user) {
          req.flash('error', '未登录'); 
          return res.redirect('/signin');
        }
        next();
      },

      checkNotLogin: function checkNotLogin(req, res, next) {
        if (req.session.user) {
          req.flash('error', '已登录'); 
          return res.redirect('back');//返回之前的页面
        }
        next();
      }
    };
    ----------------------
    Express是一个基于Node.js实现的Web框架，其响应HTTP请求的response对象中有两个
    用于URL跳转方法res.location()和res.redirect()，使用它们可以实现URL的301或302重定向。
    res.redirect([status,] path)
    其中参数：
    status：{Number}，表示要设置的HTTP状态码
    path：{String}，要设置到Location头中的URL
    使用指定的http状态码，重定向到指定的URL，如果不指定http状态码，使用默认的状态码”302“：”Found“，
    详见：：：http://www.cnblogs.com/duhuo/p/5609127.html
    -----------------------
    可以看出：

    checkLogin: 当用户信息（req.session.user）不存在，即认为用户没有登录，则跳转到登录页，同时显示 未登录 的通知，
    用于需要用户登录才能操作的页面及接口checkNotLogin: 当用户信息（req.session.user）存在，即认为用户已经登录，
    则跳转到之前的页面，同时显示 已登录 的通知，如登录、注册页面及登录、注册的接口
    最终我们创建以下路由文件：

    routes/index.js

    module.exports = function (app) {
      app.get('/', function (req, res) {
        res.redirect('/posts');
      });
      app.use('/signup', require('./signup'));
      app.use('/signin', require('./signin'));
      app.use('/signout', require('./signout'));
      app.use('/posts', require('./posts'));
    };
    -------------
          app.use 不是来处理请求的, 而是来加载处理请求的路由模块的参数.
      比如这个例子:
          app.use(express.bodyParser());
          app.use(express.methodOverride());
          app.use(app.router);
          app.use(function(err, req, res, next){
            // logic
          });
          一个请求过来, 被 .use 写好的各个函数依次处理,
          更准确说, 是从第一个开始处理, 到一个做一点操作, 也可能截断流程直接返回…
          而 app.get 等等 HTTP 请求的操作, 统一在 app.routes 着一个模块里边
          http://expressjs.com/api.html#app.routes
          所以, 先调用应该是 app.use, 而 app.get 应该是属于被前者调用才对…

          app.use和app.get,app.post等等在express框架里面处理都是类似的,都是抽象成一个Layer(层),
          只是app.get这些的层比app.use的层稍微复杂一点.顺序方面的话,先注册的层在访问的时候先调用,
          调用next()到下一个匹配url的Layer
          
          
          个人理解：app.use（）是用来注册服务的，app.get（）是他的一个特殊形式或是子集，只能用来处理http请求，
          执行顺序是先调用先执行属于平级？？？？
    -------------      
    routes/posts.js

    var express = require('express');
    var router = express.Router();

    var checkLogin = require('../middlewares/check').checkLogin;

    // GET /posts 所有用户或者特定用户的文章页
    //   eg: GET /posts?author=xxx
    router.get('/', function(req, res, next) {
      res.send(req.flash());
    });

    // POST /posts 发表一篇文章
    router.post('/', checkLogin, function(req, res, next) {
      res.send(req.flash());
    });

    // GET /posts/create 发表文章页
    router.get('/create', checkLogin, function(req, res, next) {
      res.send(req.flash());
    });

    // GET /posts/:postId 单独一篇的文章页
    router.get('/:postId', function(req, res, next) {
      res.send(req.flash());
    });

    // GET /posts/:postId/edit 更新文章页
    router.get('/:postId/edit', checkLogin, function(req, res, next) {
      res.send(req.flash());
    });

    // POST /posts/:postId/edit 更新一篇文章
    router.post('/:postId/edit', checkLogin, function(req, res, next) {
      res.send(req.flash());
    });

    // GET /posts/:postId/remove 删除一篇文章
    router.get('/:postId/remove', checkLogin, function(req, res, next) {
      res.send(req.flash());
    });

    // POST /posts/:postId/comment 创建一条留言
    router.post('/:postId/comment', checkLogin, function(req, res, next) {
      res.send(req.flash());
    });

    // GET /posts/:postId/comment/:commentId/remove 删除一条留言
    router.get('/:postId/comment/:commentId/remove', checkLogin, function(req, res, next) {
      res.send(req.flash());
    });

    module.exports = router;
    routes/signin.js

    var express = require('express');
    var router = express.Router();

    var checkNotLogin = require('../middlewares/check').checkNotLogin;

    // GET /signin 登录页
    router.get('/', checkNotLogin, function(req, res, next) {
      res.send(req.flash());
    });

    // POST /signin 用户登录
    router.post('/', checkNotLogin, function(req, res, next) {
      res.send(req.flash());
    });

    module.exports = router;
    routes/signup.js

    var express = require('express');
    var router = express.Router();

    var checkNotLogin = require('../middlewares/check').checkNotLogin;

    // GET /signup 注册页
    router.get('/', checkNotLogin, function(req, res, next) {
      res.send(req.flash());
    });

    // POST /signup 用户注册
    router.post('/', checkNotLogin, function(req, res, next) {
      res.send(req.flash());
    });

    module.exports = router;
    routes/signout.js

    var express = require('express');
    var router = express.Router();

    var checkLogin = require('../middlewares/check').checkLogin;

    // GET /signout 登出
    router.get('/', checkLogin, function(req, res, next) {
      res.send(req.flash());
    });

    module.exports = router;
    最后， 修改 index.js 如下：

    index.js

    var path = require('path');
    var express = require('express');
    var session = require('express-session');
    var MongoStore = require('connect-mongo')(session);
    var flash = require('connect-flash');
    var config = require('config-lite');
    var routes = require('./routes');
    var pkg = require('./package');

    var app = express();

    // 设置模板目录
    app.set('views', path.join(__dirname, 'views'));
    // 设置模板引擎为 ejs
    app.set('view engine', 'ejs');

    // 设置静态文件目录
    app.use(express.static(path.join(__dirname, 'public')));
    // session 中间件
    app.use(session({
      name: config.session.key,// 设置 cookie 中保存 session id 的字段名称
      secret: config.session.secret,// 通过设置 secret 来计算 hash 值并放在 cookie 中，使产生的 signedCookie 防篡改
      cookie: {
        maxAge: config.session.maxAge// 过期时间，过期后 cookie 中的 session id 自动删除
      },
      store: new MongoStore({// 将 session 存储到 mongodb
        url: config.mongodb// mongodb 地址
      })
    }));
    // flash 中间件，用来显示通知
    app.use(flash());

    // 路由
    routes(app);

    // 监听端口，启动程序
    app.listen(config.port, function () {
      console.log(`${pkg.name} listening on port ${config.port}`);
    });
    注意：中间件的加载顺序很重要。如上面设置静态文件目录的中间件应该放到 routes(app) 之前加载，
    这样静态文件的请求就不会落到业务逻辑的路由里；flash 中间件应该放到 session 中间件之后加载，因为 flash 是基于 session 的。
    运行 supervisor --harmony index 启动博客，访问以下地址查看效果：

    http://localhost:3000/posts
    http://localhost:3000/signout
    http://localhost:3000/signup
