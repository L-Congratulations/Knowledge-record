一、创建项目
1.1、在命令行中：ng new auction --routing  运行ng serve 检查程序运行是否正常
1.2、引入外部库：首先在当前项目中引入库npm i jquery --save   npm i bootstrap --save
然后把库引入到项目中：在angular.cli.json文件中添加
"styles": [
        "styles.css",
        "../node_modules/bootstrap/dist/css/bootstrap.css"
      ],
      "scripts": [
        "../node_modules/jquery/dist/jquery.js",
        "../node_modules/bootstrap/dist/js/bootstrap.js"
      ],
1.3、安装库的类型描述文件（将JavaScript所写的东西转化为typescript能识别的文件），这样typescript才能认识这些库中的代码。
npm i @types/jquery --save-dev   npm i @types/bootstrap --save-dev

二、项目开发

2.1、项目架构分析（目的是为了开发可重用的组件，用组件化的思路思考）
项目需要分成多少个组件开发：根据功能进行划分为若干个小的组件（在本项目中可划分：app组件，就是最外层的跟组件、导航栏组件、footer组件、搜索表单组件、
轮播图组件、产品列表展示组件、星级评价组件）

2.2、根据划分的组件使用angular命令行生成对应的组件：
ng g component navbar  ng g component footer   ng g component search  ng g component carousel   ng g component product
ng g component stars

2.3、组件静态页面编写
因为组件可以通过标签直接引用，所以编写的时候就是根据UI图中组件所在的位置给他进行定位
然后就是写具体组件中的样式
private starts: Array<boolean>;
private products: Array<Product>;
  constructor() { }

  ngOnInit() {
    this.products = [
      new Product(1, '第一个商品', 1.88, 3.5, 'angular4.0', ['图书', '硬件设备'], '../../assets/imgs/3.png'),
      new Product(2, '第二个商品', 2.88, 2.5, 'angular4.0', ['电子产品', '硬件设备'], '../../assets/imgs/1.png'),
      new Product(3, '第三个商品', 3.88, 4.5, 'angular4.0', ['硬件设备'], '../../assets/imgs/2.png'),
      new Product(4, '第四个商品', 4.88, 2.5, 'angular4.0', ['电子产品'], '../../assets/imgs/1.png'),
      new Product(5, '第五个商品', 5.88, 1.5, 'angular4.0', ['图书'], '../../assets/imgs/2.png'),
      new Product(6, '第六个商品', 6.88, 4.5, 'angular4.0', ['图书', '硬件设备'], '../../assets/imgs/3.png')
    ];
  }
  <span *ngFor="let star of starts" class="glyphicon glyphicon-star" [class.glyphicon-star-empty]="star"></span>

三、路由应用

3.1、创建商品详情组件ng g component productDetail
因为要从路由中获取到参数，所以需要在constructor中注入
export class ProductDetailComponent implements OnInit {
  private productTitle: string;
  private productImg: string;
  constructor(private routeInfo: ActivatedRoute) { } // 注入ActivatedRoute

  ngOnInit() {
    this.productTitle = this.routeInfo.snapshot.params['productTitle']; // 将从路由中获取到的
    // 参数赋值给自己定义的变量。在这的配置是和路由中配置相匹配的
    this.productImg = '../../assets/imgs/2.png';
  }

}

3.2、定义一个home组件用来包含轮播和商品列表组件

3.3、将app.component.html中原来放置轮播和列表的地方用插座替换
<div class="col-md-9">
      <router-outlet></router-outlet>
    </div>
注意：路由切换的是插座内的内容

3.4、配置路由：根据路径的不同，切换插座内显示的内容
const routes: Routes = [
  {
    path: '', component: HomeComponent,
  },
  {path: 'product/:productTitle', component: ProductDetailComponent}
];

3.5、配合路由传递参数，在product.component.html中：
<h4 class="pull-left"><a [routerLink]="['/product', product.title]">{{product.title}}</a></h4>来配合路由将title传递出去
