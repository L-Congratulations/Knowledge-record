1、v-if
        <div id="app">
            <div v-if="Math.random() > 0.5">
              Sorry
            </div>
            <div v-else>
              Not sorry
            </div>
        </div>

        <script>
        new Vue({
          el: '#app'
        })
        </script>
        ----------------------------------------------------------
        总结：可以直接接受判断语句Math.random() > 0.5
        
        v-show 和v-if区别：v-show 是否显示，不管满不满足条件均会在dom中，若不满足条件，则会设置成隐藏 display:none
                          v-show 不支持 <template> 语法。
                          v-if 条件判断，不满足条件的话则不会出现在dom中
        ----------------------------------------------------------
        
        
        
2、v-for：
v-for 指令需要以 item in items 形式的特殊语法， items 是源数据数组并且 item 是数组元素迭代的别名。

    （1）、可以遍历一个数组里面的所有内容{{site}}，{ "name": "aa" }{ "name": "bb" }{ "name": "cc" }
    也能遍历数组中每个元素的属性 {{ site.name }}，aa bb cc
                          <div id="app">
                            <ol>
                              <li v-for="site in sites">
                                {{ site.name }}
                              </li>
                            </ol>
                          </div>

                          <script>
                          new Vue({
                            el: '#app',
                            data: {
                              sites: [
                                { name: 'aa' },
                                { name: 'bb' },
                                { name: 'cc' }
                              ]
                            }
                          })
                          </script>
                          
        ---------------------------------------------
        总结：<template v-for="site in sites">
                <li>{{ site.name }}</li>
                <li>--------------</li>
              </template>
              给li套了一层模板template 而且循环的层是template 所以里面的两个li元素都会循环
        ---------------------------------------------
      （2）、也可以遍历一个对象里面的所有属性：菜鸟教程 http://www.runoob.com 学的不仅是技术，更是梦想！
      <div id="app">
        <ul>
          <li v-for="value in object">
          {{ value }}
          </li>
        </ul>
      </div>

      <script>
      new Vue({
        el: '#app',
        data: {
          object: {
            name: '菜鸟教程',
            url: 'http://www.runoob.com',
            slogan: '学的不仅是技术，更是梦想！'
          }
        }
      })
      </script>
      --------------------------------------------
       总结：<li v-for="site in sites">
                {{site}}<br/>
                ---------------
              </li>
              属性循环结果：：以li为一个循环
              菜鸟教程
              ---------------
              http://www.runoob.com
              ---------------
              学的不仅是技术，更是梦想！
              ---------------
      ----------------------------------------------
      （3）、v-for 也可以循环整数1 2 3 4 5 6 7 8 9 10
      <body>
        <div id="app">
          <ul>
            <li v-for="n in 10">
             {{ n }}
            </li>
          </ul>
        </div>

        <script>
        new Vue({
          el: '#app'
        })
        </script>
        </body>
      （4）、  你也可以提供第二个的、第三个的参数为键名：0. name : 菜鸟教程 1. url : http://www.runoob.com 
                                                      2. slogan : 学的不仅是技术，更是梦想！
      <body>
        <div id="app">
          <ul>
            <li v-for="(value, key, index) in object">
             {{ index }}. {{ key }} : {{ value }}
            </li>
          </ul>
        </div>

        <script>
        new Vue({
          el: '#app',
          data: {
            object: {
              name: '菜鸟教程',
              url: 'http://www.runoob.com',
              slogan: '学的不仅是技术，更是梦想！'
            }
          }
        })
        </script>
        </body>
3、vue计算属性
        计算属性关键词: computed。这个关键词应该是必须的，即使不是必须的也要按习惯走
        我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，
        只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。
        可以说使用 computed 性能会更好，但是如果你不希望缓存，你可以使用 methods 属性。
        计算属性在处理一些复杂逻辑时是很有用的。
        
        this指的是vue实例
        <div id="app">
                  <p>原始字符串: {{ message }}</p>
                  <p>计算后反转字符串: {{ reversedMessage }}</p>
                  <input type="text" v-model="message">
                </div>

                <script>
                var vm = new Vue({
                  el: '#app',
                  data: {
                    message: 'Runoob!'
                  },
                  computed: {
                    // 计算属性的 getter
                    reversedMessage: function () {
                      // `this` 指向 vm 实例
                      return this.message.split('').reverse().join('')
                    }
                  }
                })
                </script>
                中声明了一个计算属性 reversedMessage 。
                提供的函数将用作属性 vm.reversedMessage 的 getter 。
                vm.reversedMessage 依赖于 vm.message，在 vm.message 发生改变时，vm.reversedMessage 也会更新。
                
                
                
                computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：
                var vm = new Vue({
                  el: '#app',
                  data: {
                    name: 'Google',
                    url: 'http://www.google.com'
                  },
                  computed: {
                    site: {
                      // getter
                      get: function () {
                        return this.name + ' ' + this.url
                      },
                      // setter
                      set: function (newValue) {
                        var names = newValue.split(' ')
                        this.name = names[0]
                        this.url = names[names.length - 1]
                      }
                    }
                  }
                })
                // 调用 setter， vm.name 和 vm.url 也会被对应更新
                vm.site = '菜鸟教程 http://www.runoob.com';
                document.write('name: ' + vm.name);
                document.write('<br>');
                document.write('url: ' + vm.url);
                
                
                从实例运行结果看在运行 vm.site = '菜鸟教程 http://www.runoob.com'; 时，setter 会被调用，
                vm.name 和 vm.url 也会被对应更新。
