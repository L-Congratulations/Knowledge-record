对于写在HTML页面里的JS，浏览器充当了解析器的角色。而对于需要独立运行的JS，NodeJS就是一个解析器。
例如运行在浏览器中的JS的用途是操作DOM，浏览器就提供了document之类的内置对象。
而运行在NodeJS中的JS的用途是操作磁盘文件或搭建HTTP服务器，NodeJS就相应提供了fs、http等内置对象。


一、node安装
  1.1、node安装：直接去官网下载https://nodejs.org/en/download/，选择合适的版本进行安装
  1.2、检测PATH环境变量是否配置了Node.js，点击开始=》运行=》输入"cmd" => 输入命令"path"，输出如下结果：。。。
      如果我们可以看到环境变量中已经包含了C:\Program Files\nodejs\就说明安装配置成功
  1.3、打开命令行输入指令node运行会发现命令行左上角会有-node字符，说明现在进入到了node运行环境输入console.log("第一条命令")，这只是用node运行简单
    的命令。如果想同时运行多行命令？--可以直接运行一个js文件，因为js文件里面是不限制命令多少的。具体方法，找到js所在的文件目录，运行node hello如下
    D:\environment\web APP\node_huigulianxi\first>node hello（hello.js中只有一条命令console.log("第一个node命令")
    第一个node命令
  1.4、编写稍大一点的程序的时候一般都会讲代码模块化，在NodeJS中，一般将代码合理拆分到不同的JS文件中，每一个文件就是一个模块，而文件路径就是模块名。
  1.5、在编写每个模块时，都有require、exports、module三个预先定义好的变量可供使用。
  
      require:
          require函数用于在当前模块中加载和使用别的模块，传入一个模块名，返回一个模块导出对象。模块名可使用相对路径（以./开头），
          或者是绝对路径（以/或C:之类的盘符开头）。另外，模块名中的.js扩展名可以省略。以下是一个例子。

          var foo1 = require('./foo');
          var foo2 = require('./foo.js');
          var foo3 = require('/home/user/foo');
          var foo4 = require('/home/user/foo.js');
          // foo1至foo4中保存的是同一个模块的导出对象。
          另外，可以使用以下方式加载和使用一个JSON文件。
          var data = require('./data.json');
          
      exports:
          exports对象是当前模块的导出对象，用于导出模块公有方法和属性。别的模块通过require函数使用当前模块时得到的就是当前模块的exports对象。
          以下例子中导出了一个公有方法。

          exports.hello = function () {
              console.log('Hello World!');
          };  
      module:
          通过module对象可以访问到当前模块的一些相关信息，但最多的用途是替换当前模块的导出对象。例如模块导出对象默认是一个普通对象，
          如果想改成一个函数的话，可以使用以下方式。

          module.exports = function () {
              console.log('Hello World!');
          };
          以上代码中，模块默认导出对象被替换为一个函数。    
          ------------------------------------------------------------------------------------------------------------------------
          注意：一个模块中的JS代码仅在模块第一次被使用时执行一次，并在执行过程中初始化模块的导出对象。之后，缓存起来的导出对象被重复利用。
          var counter1 = require('./util/counter');
          var    counter2 = require('./util/counter');

          console.log(counter1.count());
          console.log(counter2.count());
          console.log(counter2.count());
          运行该程序的结果如下：

          $ node main.js
          1
          2
          3
          可以看到，counter.js并没有因为被require了两次而初始化两次。
          --------------------------------------------------------------------------------------------------------------------------

二、express安装
三、node服务器搭建
四、restful风格服务器搭建
