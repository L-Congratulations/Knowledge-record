一、mdn
1.1、css在app端兼容性问题基本为0
1.2、跨域：协议、域名、端口、不同都为跨域。
其中一种方式是在服务器端配置一下header（“Access-control。。。。”），在客户端不需要做任何事情。就可以去请求已配置了header参数的服务器资源

二、查找vue的库，可以从vue的GitHub上点击vue标签就能找到

三、vue是一个渐进式框架：可以根据需求自定义的进行扩展。不用把一整套东西全都用上（只渲染视图-》整个应用）
3.1、vue的两个核心点：响应的数据绑定和组合的视图模型
3.1.1、响应的数据绑定：
所谓的数据驱动就是当数据发生变化的时候，用户界面发生相应的变化，开发者不需要手动的去修改dom。
 Object.defineProperty
 
 3.1.2、组合的视图模型：
 
 3.2、虚拟dom：
 vue的模板（咱们写的代码）--》vue调用createElement渲染函数将vue模板进行解析--》通过render方法返回的结果就是虚拟dom树（一个包含模板所有属性的对象）--》
 虚拟dom树经过调用方法生成真正的dom节点。   当数据发生改变的时候新旧虚拟dom树会进行对比，然后只渲染改动的地方
 
 3.2、mvvm
 m：数据模型  数据通过视图进行展示
 v：视图模板
 vm：视图模型  拿到数据之后通过vm将数据与视图进行绑定   当用户交互的时候通过vm监听事件与数据进行交互 视图和数据通过vm进行联系
 在vue中 new Vue（） 就是vm层
 
 四、模板
 4.1、html模板。就是正常写的html
 4.2、字符串模板：vue实例中的template。将一段字符串翻译成html代码。根节点只能有一个（如不能在字符串的最外层元素包含多个同级div）
 灵活的用法：将字符串放在一个类型为x-template的script标签内，在vue实例template属性上通过ID将字符串进行转义为html。放在哪？？？
 4.3、render函数：
 在vue实例中有一个render函数，有一个默认的参数createElement方法，在这个方法上进行
render:function(createElement) {
            return createElement(
                'ul',
                {},  // 属性写在对象里面，子元素写在数组里面，逐层嵌套
                [
                    createElement('li',1)
                ]

            )
        }
 
 掌握一门框架：
 1、核心理念
 2、基本语法
 3、常用方法（数据传递，路由，http服务等）
