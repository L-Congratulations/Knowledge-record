一、mdn
1.1、css在app端兼容性问题基本为0
1.2、跨域：协议、域名、端口、不同都为跨域。
其中一种方式是在服务器端配置一下header（“Access-control。。。。”），在客户端不需要做任何事情。就可以去请求已配置了header参数的服务器资源

二、查找vue的库，可以从vue的GitHub上点击vue标签就能找到

三、vue是一个渐进式框架：可以根据需求自定义的进行扩展。不用把一整套东西全都用上（只渲染视图-》整个应用）
3.1、vue的两个核心点：响应的数据绑定和组合的视图模型
3.1.1、响应的数据绑定：
所谓的数据驱动就是当数据发生变化的时候，用户界面发生相应的变化，开发者不需要手动的去修改dom。
 Object.defineProperty
 
 3.1.2、组合的视图模型：
 
 3.2、虚拟dom：
 vue的模板（咱们写的代码）--》vue调用createElement渲染函数将vue模板进行解析--》通过render方法返回的结果就是虚拟dom树（一个包含模板所有属性的对象）
 --》 虚拟dom树经过调用方法生成真正的dom节点。   当数据发生改变的时候新旧虚拟dom树会进行对比，然后只渲染改动的地方
 
 3.2、mvvm
 m：数据模型  数据通过视图进行展示
 v：视图模板
 vm：视图模型  拿到数据之后通过vm将数据与视图进行绑定   当用户交互的时候通过vm监听事件与数据进行交互 视图和数据通过vm进行联系
 在vue中 new Vue（） 就是vm层
 
 四、模板
 4.1、html模板。就是正常写的html
 4.2、字符串模板：vue实例中的template。将一段字符串翻译成html代码。根节点只能有一个（如不能在字符串的最外层元素包含多个同级div）
 灵活的用法：将字符串放在一个类型为x-template的script标签内，在vue实例template属性上通过ID将字符串进行转义为html。放在哪？？？
 4.3、render函数：
 在vue实例中有一个render函数，有一个默认的参数createElement方法，在这个方法上进行
render:function(createElement) {
            return createElement(
                'ul',
                {},  // 属性写在对象里面，子元素写在数组里面，逐层嵌套
                [
                    createElement('li',1)
                ]

            )
        }
 
 掌握一门框架：
 1、核心理念
 2、基本语法
 3、常用方法（数据传递，路由，http服务等）



五、指令：

5.1、v-for
首先循环的是数组中的每一项：item in items    item=items[i],至于items[i]是一个数组还是一个对象看具体数据
如果直接是循环一个对象，而不是数组，那么直接使用
v-for 指令需要以 item in items 形式的特殊语法， items 是源数据数组并且 item 是数组元素迭代的别名。
    （1）、可以遍历一个数组里面的所有内容{{site}}，{ "name": "aa" }{ "name": "bb" }{ "name": "cc" }
    也能遍历数组中每个元素的属性 {{ site.name }}，aa bb cc
                          <div id="app">
                            <ol>
                              <li v-for="site in sites">
                                {{ site.name }}
                              </li>
                            </ol>
                          </div>

                          <script>
                          new Vue({
                            el: '#app',
                            data: {
                              sites: [
                                { name: 'aa' },
                                { name: 'bb' },
                                { name: 'cc' }
                              ]
                            }
                          })
                          </script>
                          
        ---------------------------------------------
        总结：<template v-for="site in sites">
                <li>{{ site.name }}</li>
                <li>--------------</li>
              </template>
              给li套了一层模板template 而且循环的层是template 所以里面的两个li元素都会循环
        ---------------------------------------------
      （2）、也可以遍历一个对象里面的所有属性：菜鸟教程 http://www.runoob.com 学的不仅是技术，更是梦想！
      <div id="app">
        <ul>
          <li v-for="value in object">
          {{ value }}
          </li>
        </ul>
      </div>

      <script>
      new Vue({
        el: '#app',
        data: {
          object: {
            name: '菜鸟教程',
            url: 'http://www.runoob.com',
            slogan: '学的不仅是技术，更是梦想！'
          }
        }
      })
      </script>
      --------------------------------------------
       总结：<li v-for="site in sites">
                {{site}}<br/>
                ---------------
              </li>
              属性循环结果：：以li为一个循环
              菜鸟教程
              ---------------
              http://www.runoob.com
              ---------------
              学的不仅是技术，更是梦想！
              ---------------
      ----------------------------------------------
      （3）、v-for 也可以循环整数1 2 3 4 5 6 7 8 9 10
      <body>
        <div id="app">
          <ul>
            <li v-for="n in 10">
             {{ n }}
            </li>
          </ul>
        </div>

        <script>
        new Vue({
          el: '#app'
        })
        </script>
        </body>
      （4）、  你也可以提供第二个的、第三个的参数为键名：0. name : 菜鸟教程 1. url : http://www.runoob.com 
                                                      2. slogan : 学的不仅是技术，更是梦想！
      <body>
        <div id="app">
          <ul>
            <li v-for="(value, key, index) in object">
             {{ index }}. {{ key }} : {{ value }}
            </li>
          </ul>
        </div>

        <script>
        new Vue({
          el: '#app',
          data: {
            object: {
              name: '菜鸟教程',
              url: 'http://www.runoob.com',
              slogan: '学的不仅是技术，更是梦想！'
            }
          }
        })
        </script>
        </body>
5.2、v-on：
数据驱动：获取数据通过vue指令来获取，而不是通过dom的vue属性来获取
通过双向数据绑定将dom中元素的值获取到，而不是通过dom的value属性来获取。
<input v-module="todo">

data{
todo:"",
}
methods:{
            add(){
                this.list.push({
                    title:this.todo
                })
            }
        }
