一、变量作用域和闭包：
1、闭包的理解：子函数可以使用父函数的局部变量
          function aa() {//父函数
            var a = 12;
            function bb() {//子函数
                alert(a);//子函数可以使用父函数的局部变量
            }
            bb();
        }
二、运算符：
1、取余：%
----------------------------------------------------------------------------------------------------------------------------------
  做隔行变色：
  var list = document.querySelector('#list');
        var listChild = list.querySelectorAll('li');//和jQuery类似，得到的结果是一个数组
        for (var i = 0; i<listChild.length;i++){
            if(i%2 == 0){
                listChild[i].style.background = '#ccc'//listChild[i]一定要记住这种用法，！！！！！
            }
        }
   秒换算为分钟：
        var n = 1234;
        alert(parseInt(n/60) + '分' + (n%60) + '秒')
 ----------------------------------------------------------------------------------------------------------------------------------    
 2、==与！=（判断两个东西是否不相等，而！是取反）相反
 3、运算符优先级：括号。可以用括号来改变运算的优先级
 
 三、程序流程控制：
1、 switch（放的是值或者变量）{
      case 值1:
           ...
           break;
      ...
      default:
              ...
 }
 
 2、三目运算符 ？：（if...else...的简写）
 --------------------------------------------------------------------------------------------------------------------------------
         if(条件){
            语句1
        }else {
            语句2
        }
        条件？语句1：语句2
 ---------------------------------------------------------------------------------------------------------------------------------  
 3、跳出 break continue
 break：终止整个循环
 continue：终止本次循环，继续下一次循环
 
 4、什么是真，什么是假：
 真：true、非零数字、非空字符串、非空对象
 假：false、0、控制符串、null（空对象）、undefined
 
 四、json
 1、for in
 --------------------------------------------------------------------------------------------------------------------------------
        var obj = {a:2,b:3,c:5};
        for (var attr in obj){
            console.log(attr);//此处定义的变量arrt里面存的就是obj对象中的a,b,c（对象中的value）。for执行3次
            console.log(obj[attr]);//obj[attr]就是对应的每个value的key
        }       
  -------------------------------------------------------------------------------------------------------------------------------      




五、函数返回值
1、函数的返回值也就是函数的执行结果
      一个函数应该只返回一种类型的值
2、可变参：arguments （存放函数所有参数的一个数组）
---------------------------------------------------------------------------------------------------------------------------------
    当一个函数参数不定时，第一时间要想到arguments，然后利用他去控制参数arguments是一个包含所有参数的数组，arguments[i]就是具体的每个数组
          function show() {
            var result = 0;
            for (var i=0;i<arguments.length;i++){
                result += arguments[i]
            }
            console.log(result);
          }
          show(2,4,7)//13
------------------------------------------------------------------------------------------------------------------------------  
3、利用arguments来封装css（）函数
        function css(obj,attr,value) {
            if (arguments.length ==2){//获取属性
                //style只能获取设置在行内的样式，因此要获取在css中定义的样式需要用别的方式
                //获取非行间的样式使用：currentStyle（获取计算后的样式--IE）
                //在火狐下使用getComputedStyle()接受两个参数，一个是需要获取的元素，另外一个全都写false就行
                //如何让这两个写法在不同浏览器下自动切换？很简单利用true和false
//                console.log(arguments[0].currentStyle);//返回一个非空对象，利用这个可以做浏览器判断
//                if (arguments[0].currentStyle){
//                    return arguments[0].currentStyle[arguments[1]];
//                }else {
//                    return getComputedStyle(arguments[0],false)[arguments[1]];
//                }
                //获取属性很常用，为了书写方便将他封装为一个函数
                function getStyle(obj,attr) {
                    if (obj.currentStyle){
                        //currentStyle好处可以取到默认值，即使没设置属性。不过只能获取单一样式如
                        //background 结果为undefined backgroundColor结果为red
                        return obj.currentStyle[attr];
                    }else {
                        return getComputedStyle(obj,false)[attr];
                    }
                }
//                getStyle(arguments[0],arguments[1]);
                getStyle(obj,attr);
            }else {//设置属性
                //代码优化：提高代码的可读性，因为arguments和参数是可以共存的，arguments[0]===函数的第一个参数
                //所以可以给函数几个初始的参数css(obj,attr,value),相应的将arguments[i]替换掉
                //而且在函数中写3个参数不代表这一定要用到3个参数，调用的时候可以不同

//                arguments[0].style[arguments[1]] = arguments[2];
                //注意此处不能用style.arguments[1]而是要用style[arguments[1]]

                obj.style[attr] = value;
            }
        }


六、数组的使用：
1、定义：var arr1 = [1,2,3];
        var arr2 = new Array(1,2,3)
    两种方法定义数组没有任何差别    
 2、数组的属性
 length（既可以获取，也可以设置）
 数组的length可以赋值，并且赋值后会改变数组的长度，大于原数组长度后多出的部分会以空来填充，获取之后会发现是undefined
 可以利用length属性来清空数组
 3、数组的方法
         var arr1 = [1,2,3];
        var arr2 = new Array(1,2,3);
        arr1.push(4);//从尾部添加[1,2,3,4]
        arr1.unshift(5);//从头部添加[5,1,2,3]
        arr2.pop();//从尾部剔除[1,2]
        arr2.shift();//从头部剔除[2,3]
  
  4、数组排序
  arr.sort()
  sort做的工作是将数组中的任意两个值挑出来扔进sort里面进行处理
  所以进行如下改造，就可以对数字进行排序了：
        arr1.sort(function (num1,num2) {
            return num1 - num2;
        });//由小到大排序 如果是return num2 - num1;由大到小排序
   简单来说就是可以给他一个比较函数的参数，通过比较函数就可以排行顺序     
   
   5、concat（）链接两个数组
   arr1.concat(arr2);原数组不变，生成一个新数组
  
  6、join（）把数组里面的元素用分隔符拼成一个大的字符串
  arr1.join('-')//1-2-3
  
  7、split（）字符串变成数组与join相反
  var str = '1-2-3';
  str.split('-')//['1','2','3']
  
  8、数组中最靠谱最万能的splice
  所有的数组插入删除工作都可以完成
  （1）、删除数组中任意元素：splice(起始位置，需要删除的数组的长度)
  （2）、添加任意元素到数组任意位置：splice(需要添加的位置,0（此处的0代表删除0个元素，也就是从该位置开始添加所需要添加的元素）,...(此处是需要添
          加的内容，无限制，只要是在前两个参数之后都代表要添加的数组元素))
  （3）、替换数组中元素：splice(起始位置，需要删除的数组长度，需要替换的元素)   arr.splice(1,2,5,6)    
  
  
七、DOM元素操作
1、


八、cookie
1、作用：给网站保存信息，在客户端
cookie和网页缓存没有任何关系
cookie完全由js来控制
cookie有一个特性：他是完全存在客户端上的，也就是在用户的计算机上以一个文件的形式存在的
cookie只有在服务器环境下才能正常运行，（只有火狐的cookie是可以在本地运行的，其他浏览器的cookie都需要借助服务器环境才能运行）
2、cookie的特性
（1）、同一个网站的所有页面共享一套cookie（比如baidu.com下的页面共享的是一套cookie）
（2）、数量和大小有限（一般来讲一个网站的cookie的数量不会超过50个，大小也有限）
（3）、cookie有过期时间，一段时间之后就会消失，过期时间由js控制
3、在js中使用cookie
在js中，cookie实际上是document上的一个属性
alert(document.cookie);
（1）、设置cookie
          格式：名字=值 如： document.cookie = 'user=blue';
          不会覆盖：在cookie的设置中  ‘=’ 意味着添加而不是赋值 如：document.cookie = 'user=blue';        document.cookie = 'password=123';
                   得到的结果是两个
          设置过期时间：如果没有指定cookie中信息的过期时间，那么默认的是到浏览器关闭为止 。利用setDate（）方法来设置时间
                            var date = new Date();//获取当前时间
                            date.setDate(date.getDate()+30);//当前时间+30天
                            document.cookie = 'user=blue;expires='+ date;//当前时间的30天后过期
 -----------------------------------------------------------------------------------------------------------
 封装设置cookie函数：
        function setCookie(name,val,iDay) {
            var date = new Date();
            date.setDate(date.getDate()+iDay);
            document.cookie = name + '=' + val +';expires='+date
        }
 封装获取cookie函数：
         function getCookie(name) {
            var arr = document.cookie.split('; ');
            for (var i =0;i<arr.length;i++){
                var arr2 = arr[i].split('=');
                if (arr2[0] == name){
                    return arr2[1];
                }
            }
            //如果用户初次登陆还没有设置cookie此时应该返回一个''
            return '';
        }
 -------------------------------------------------------------------------------------------------------------
 
