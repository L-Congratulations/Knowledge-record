追逐新技术：vue+axios+es6+spa+移动端
一、vue.js核心思想：
1、数据驱动：
  dom是数据驱动的一种自然映射。
  数据响应原理：
  数据改变驱动视图更新，我们有一个数据a.b在，vue.js实例化的过程中，会给a.b这份数据通过es5的object....
  当实例化一个Vue构造函数，会执行 Vue 的 init 方法，在 init 方法中主要执行三部分内容，一是初始化环境变量，
  而是处理 Vue 组件数据，三是解析挂载组件。以上三部分内容构成了 Vue 的整个执行过程。

Vue 实现了一个 观察者-消费者(订阅者) 模式来实现数据驱动视图。通过设定对象属性的 setter/getter 方法来监听
数据的变化，而每个属性的 setter 方法就是一个观察者， 当属性变化将会向订阅者发送消息，从而驱动视图更新。
2、组件化：

二、webpack功能：
将各种文件编译打包生成js css png等浏览器能识别的文件

三、项目资源：
1、移动端切图要准备2x和3x两种图片，以适应不同手机的dpr（设备像素比）
2、vue移动端为什么要切成单张的图片，而不用雪碧图？因为webpack打包的时候会对图片进行处理，转为bas64，这样有可能在加载的时候一张图片资源的请求都没有
3、svg图片（放大不失真）引用：通常在开发过程中会把色彩单一的图片做成svg图片。我们会用一些工具先将svg图片转换为图标字体的文字，然后在css中引入
  图标字体文字。
  ------------------------------------------------------------------------------------------------------------------------------
  图标字体制作：
  利用icomoon工具：教程:http://jingyan.baidu.com/article/f79b7cb346cf499145023e78.html
  https://icomoon.io/
  引用：
  -----------------------------------------------------------------------------------------------------------------------------------
  
  四、项目目录结构设计：
  1、组件安排：在conponents下面：先见一个header文件夹，然后再在文件夹里面创建header.vue主文件；这样安排的原因是一个组件除了header.vue还可能有图片
  等相关资源。组件很重要的一个设计原则是就近维护
  2、在src目录下创建common文件夹，主要包括公共的模块和资源。在common文件夹下创建js、stylus（css预处理器，和sass、less类似）、fonts（存放svg
  转化为图标字体的相关文件，这里只存放转换后的fonts文件夹里面的文件，有关字体转换需要引用的另外一个style.css文件放在stylus文件夹内）三个文件夹；
  3、mock假数据：
  data.json
  {
  "sellers":{},
  "goods":{},  
  }
  仿照node.js调用接口读取数据（假接口，假数据）
  在dev-servers.js中进行配置:配置路由 
      //数据请求
      var appData = require('../data.json');
      var seller = appData.seller;
      var goods = appData.goods;
      var ratings = appData.ratings;

      //定义路由
      var apiRoutes = express.Router();
      apiRoutes.get('/seller',function (req,res) {
        res.json({
          errno:0,
          data:seller
        })
      });
      apiRoutes.get('/goods',function (req,res) {
        res.json({
          errno:0,
          data:goods
        })
      });
      apiRoutes.get('/ratings',function (req,res) {
        res.json({
          errno:0,
          data:ratings
        })
      });
      //定义路由之后，我们要通过express使用它，定义下边之后可以通过/api/goods就可以请求到goods里面的数据
      //app.ues()一般有两个参数，第一个是path；我们所有和api相关的接口都会通过/api这个路由去匹配到具体的路由
      //因为此处修改的是node配置文件所以修改完了之后要重新npm run dev
      app.use('/api',apiRoutes);
      
五、组件拆分：
header一个组件，商品、评价、商家各为一个组件
1、初始化css默认样式：
在static文件夹下新建css文件夹，然后新建reset.css在里面对样式进行初始化（从网站直接引入+自定义）
2、css文件引入
在这初始化的这个css文件直接在index.html（入口文件）中用link标签引入即可
3、移动端meta标签设置：
<meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,
minimum-scale=1.0,user-scalable=no">
4、自定义的标签名字不能是关键字，如header等，可以使用v_header
5、样式编写：flex布局
  移动端设计中：高度和行高：比如高度标注是80像素（让他垂直居中行高也设成80（Line-height行高属性，运用到对文字排版，实现上下排文字间隔距离，
      以及单排文字在一定高度情况上下垂直居中布局。http://www.jb51.net/css/199172.html）），因为所有的移动端设计都是按两倍的大小去设计的
      也就是这个宽度是按iphone6的设计稿设计，设备像素是375但物理像素是750，所以说dpr是2，设计师设计也是按两倍大小标记的尺寸。所以我们在代
      码里面设置高度属性为40px；font-size如果为28px那么属性设置应该为14px
   flex布局审查元素会发现会有一个兼容性写法，这是因为vue-loader依赖了一个postcss插件，这个插件会自动帮我们解决浏览器兼容性的写法
   
六、路由vue-router   
webpack.base.conf.js通过对components的路径进行配置，使得无论在什么位置引用components下的文件都只用components代替就行：
配置：
resolve: {
    extensions: ['.js', '.vue', '.json'],
    alias: {
      'vue$': 'vue/dist/vue.esm.js',
      '@': resolve('src'),
      'components':path.resolve(__dirname,'../src/components')//注意是双下划线
    }
  },
  效果：
  import goods from '../components/goods/goods.vue'===import goods from 'components/goods/goods.vue'

七、样式调整
1.将a标签设置为display-block，这样在点击一块区域的时候就会触发链接，而不是只有点击到a标签才触发
2.点击高亮写法。因为vue做了处理，会在点击某个链接的时候动态添加一个类如：router-link-active，所以只要在这个类上添加样式就会将高亮的效果展示出来
3.修改active 元素类名：vue-router提供了钩子，在vue-router2.0里面的router构造器配置linkActiveClass默认值是router-link-active，我们可以在router
创建实例的时候传入参数，改为我们想要的，如：linkActiveClass：active代码如下：
export default new Router({
      linkActiveClass:'active',
      routes: [   
        {
          path:'*', redirect:'/goods'
        },
        {
          path:'/goods',
          name:'goods',
          component:goods
        },
        ]
    })
具体例子看https://router.vuejs.org/zh-cn/api/options.html中routes的用法
4、一像素边框：写一个div高度为1px，然后通过缩放来实现手机下一像素边框效果transform: scaleY(0.5);。（伪类？？？？）
5、如何在pc开发移动端的时候用手机去实时预览：将localhost换成本机的ip地址，然后用http://cli.im/网站将链接（http://192.168.0.101:8080/#/ratings）
生成一个二维码（前提是手机和电脑链接的同一个局域网）

八、header组件的开发
  1、数据请求：axios
        安装：npm install axios -S
        引入：安装其他插件的时候，可以直接在 main.js 中引入并 Vue.use()，但是 axios 并不能 use，只能每个需要发送请求的组件中即时引入vue.use()相
        当于全局注册
 -------------------------------------------------------------------------------------------------------------------------------       
        为了解决这个问题，有两种开发思路，一是在引入 axios 之后，修改原型链，二是结合 Vuex，封装一个 aciton。具体的实施请往下看~
        方案一：改写原型链
        首先在 main.js 中引入 axios  ：import axios from 'axios'
        这时候如果在其它的组件中，是无法使用 axios 命令的。但如果将 axios 改写为 Vue 的原型属性，就能解决这个问题
        Vue.prototype.$ajax = axios
        在 main.js 中添加了这两行代码之后，就能直接在组件的 methods 中使用 $ajax 命令
        methods: {
          submitForm () {
            this.$ajax({
              method: 'post',
              url: '/user',
              data: {
                name: 'wise',
                info: 'wrong'
              }
           })
        }
---------------------------------------------------------------------------------------------------------------------------------
2、axios应用：
在vue实例的data函数对象后面加入钩子函数 mounted，mounted类型是函数：mounted: function(){}
vue-cli跨域：
在config/index.js里配置
proxyTable: {
      '/v2': {
        target: 'https://api.douban.com/v2',
        changeOrigin: true,
        pathRewrite: {
          '^/v2': ''
        }
      }
    },
    请求代码如下：
    const Err_ok=0
     axios.get('/v2/movie/top250?count=10').then(response =>{
         var response=response.json();//后台返回的数据格式为：
                                                             res.json({
                                                                errno:0,
                                                                data:seller
                                                              })//根据后台返回的数据格式进行转化
         if(response.errno===Err_ok){//errno是与后台商定好的状态信息，Err_ok是自定义的一个变量。这样写的好处是当需求变更时只需要更改变量的值就行
          console.log(response.data)
         }
          
      }).catch(error => {
          console.log(error)
      })
3、将ajax返回的数据赋值给vue变量：
    data(){
        return {
            seller:{}
        }
    },
    mounted:function () {
//      axios.get('/v2/movie/top250?count=10').then((response) =>{
//          console.log(response)
//      }).catch((error) => {
//          console.log(error)
//      })
      axios.get('/api/seller').then((response) =>{
          console.log(response.data.data);
          this.seller = response.data.data;//数据赋值给seller
      }).catch((error) =>{
          console.log(error)
      })
    },
 4、将数据绑定到dom结构：
 
