1、做demo时可以用div代替图片
2、px = （dpr）*（dpr）*dp   dpr：设备像素缩放比   dp：设备物理像素   px：css pixels 逻辑像素，浏览器使用的抽象单位
当dpr=2的时候 1px=4*dp 即一个css像素等于4个物理像素渲染  换个角度 也就是1px的长度就等于2dp（2个物理像素的长度） 1px高度等于2个物理像素的高度
当设备为640dp*1136dp时 dpr=2的情况下对应的应该是320px*568px

------------------------------------------------------------------------------------------------------------------------------------
如iPhone5 主屏分辨率：1136*640像素
而屏幕尺寸是320px

实际照片像素是640像素，显示在了320px的屏幕上。dpr为2 1px宽度上实际存在两个像素 所以我们在css里面设置px为单位时，此时的1px为两dp
当设备宽度为320时，我们用css设置360会超出屏幕一部分。

------------------------------------------------------------------------------------------------------------------------------------

3、viewport
------------------------------------------------------------------------------------------------------------------------------------
viewport翻译过来是：可视区窗口。是用来设置可视区大小缩放等功能
默认是980px，也就是当我们不设置meta标签时自然显示的效果，100px占整个页面的十分之一。
为了用户体验方便，可视区大小是可以设置的通过content="width=device-width"，此时的意思是，将页面渲染到一个和设备宽度一样的viewport里
结果就是页面在和设备宽度一样的窗口进行了显示。再透彻的理解就是只要在这个页面进行修改就行不用管原页面是多大，什么情况。因为手机浏览器已经做了处理的

总结：设置为content="width=device-width"之后我们所需要编辑的页面就和原来页面大小完全没关系了。
------------------------------------------------------------------------------------------------------------------------------------
ios的viewport 默认是980px
viewport做了两件事情：1、页面被渲染在了一个默认为980px（ios）的viewport里面 2、通过缩放使你看到整个viewport全貌（viewport即手机浏览器默认做的
两个事情）
viewport由两个部分构成：视图viewport（visual viewport）和布局viewport（layout viewport  这的viewport是指980px那个而不是原页面大小）
4、移动web最佳viewport设置：
  视图viewport=设备宽度=布局viewport
  <meta name="viewport" content="width=device-width, initial-scale=1,user-scalable=no">
  
5、flexbox布局：
Android4.4以下只兼容旧版本的flex ，ios兼容最新的flex

6、响应式设计：
媒体查询 百分比布局 弹性图片

7、多行文本溢出：
.intwoline{
  display:-webkit-box!important;
  ovwerflow:hidden;
  text-ovwerflow:ellipsis;
  work-break:break-all;
  -webkit-box-orient:vertical;
  -wwbkit-line-clamp:2;
  }





webAPP缺点：
1、只能使用有限的移动硬件和设备功能（）
2、在低端机Android4.4以下会明显的卡顿
3、在复杂交互，动画时会出现白屏卡顿现象
原生APP缺点：
1、分平台开发
2、后期维护麻烦

混合APP缺点：


APP可以分为两类：
1、以内容为主的文档类
  主要靠纯HTML5来实现
2、以行为交互为主的应用类
  如果APP功能不强，知名度不高即使做成了原生APP也不会有人安装
  做类似于微信的社交软件，小说阅读软件用混合APP比较好
  
混合APP种类：
view可以理解为手机界面，一个界面就是一个view
1、多view混合类型
原生界面和网页开发的界面独立展示，交替出现。对交互要求比较高的用原生界面来实现，要求不高的用网页页面来实现
2、单view混合类型
同一个界面里面。原生界面和web界面为层叠关系，同时出现
3、web主体型
应用主体是一个网页，穿插了原生功能
用户体验的好坏主要取决于底层中间件的交互和跨平台能力

原理：用前端技术开发好应用界面，借助一个APP打包框架和运行环境。根据不同的运行平台生成不同的手机运行安装包。
APP打包框架相当于一个工厂。

混合APP框架：
国外比较有名的：phonegap后来被收购改名为codvar
国内：此处采用dcloud公司的hbuild

手机模拟器：























默认样式修改：
1、去掉默认的电话和邮箱识别 ：
  用：<a href="tel:18888888888">请拨打18888888888</a>    <a href="mailto:15188961373@163.com">请发送邮件</a>    来代替
2、去掉a、input、button点击时的阴影  ：a{ -webkit-tap-highlight-color:rgba(0,0,0,0)} 将点击时的背景色设为全透明
3、消除按钮圆角：button{ -webkit-appearance:none; border-radious:0}
4、默认字体设置：body{font-family:Helvetica}  因为每台设备的默认字体不一样，而这个是所有设备都有的一个字体，不过只是英文字体
5、禁止用户修改字体大小：-webkit-text-size-adjust:100%;
6、可以取消移动端的长按默认选中的效果。不过兼容不太好
7、

